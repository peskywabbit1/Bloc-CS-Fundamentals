
EXERCISES FOR INTRO TO CLEAN CODING:


1. 
Q: In your own words, explain what clean code is and why it is important.

A: Clean code is code that understandable, easy to read, well organized, and less complicated. This is important so that other coders can read your code and utilize it effectively and easily and reuse the functions and avoid mistakes.  

2. 
Q: Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A: Customers credit card information object. If there were errors in the code and it was not created to an acceptable standard, then customer’s ability to make transactions, inspect transaction history, pay invoices, view payment history and retrieval of pertinent information relating to their account and charges, would be difficult or not feasible.  This would disrupt the customer’s use of the credit card and the customer’s would most likely close their accounts. 

3.  
Q: Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

The above is not a clean code.  There are too many comments, there is no nesting and the function and parameter names are not meaningful names.   Can use extract methods to clean it up.  This code needs to be refactored as below:

FUNCTION farenheitConversion             
  CALL Farenheit = (Celsius-32) * (5/9) 
  PRINT Farenheit
END FUNCTION

FUNCTION celsiusConversion
  CALL Celsius = (Farenheit * 1.8000 + 32.00)
  PRINT Celsius
END FUNCTION

4. 
Q: Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

A: The following is a clean code. It doesn't have to be refactored. It is nested correctly, the names are meaningful.  

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
   SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

   PRINT percentage
END FUNCTION


5.
Q: Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a: The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

Refactor:

FUNCTION checkoutCustomer(subTotal, discountRate)
  PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

END FUNCTION

FUNCTION paymentType()
   SET cash to "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   SET creditCard "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)

  IF paymentType = "cash" THEN 
   PRINT cash
  ELSE
    PRINT creditCard
  END IF
END FUNCTION 


b. The following function checks out a book if there are no issues with the guest's account. 

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

This code is not nested properly.  Please see it refactored as below:

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT guest.hasOverdueBooks AND guest.outstandingFees = 0 THEN // Combine the code by using AND
	 APPEND book to guest.books
         SET book.status to "Checked Out"
         PRINT "Your books have been issued."
 ELSE 
	PRINT "Unable to check out book." 
 END IF
END FUNCTION


c. The following class is a code snippet that should support the transactions a customer can perform at an ATM. 

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Refactor: 

CLASS BankAccount
 FUNCTION displayBalance
 PRINT balance
END FUNCTION

 FUNCTION deposit(amount)
  SET balance to balance + amount
 END FUNCTION
 
 FUNCTION withdraw(amount)
  IF balance > amount THEN
   SET balance to balance - amount
  END IF
END FUNCTION

END CLASS

CLASS Customer
 FUNCTION creditCardOffer
  IF NOT(customer.hasCreditCard) THEN
   CALL offerCreditCard
  END IF
 END FUNCTION

 FUNCTION checkStatus
  IF NOT(customer.hasCheckingAccount) THEN
   CALL offerCheckingAccount
  END IF
 END FUNCTION 

END CLASS


6. 
Q: Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root () otherwise return the sum.

A:
let integers = [10,1,4,6,1,1,2];
let sumIntegers = integers.reduce((total, item ) => total + item);
let squared = Math.sqrt(sumIntegers); 

function isSquared() {
 if(sumIntegers % squared === 0) {
  return squared;
 } else {
  return sumIntegers;
  }
 }

isSquared(integers);



7. 
Q: Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

A:
function isDuplicates(initialArray) {
 let sortedArray = initialArray.sort();
 for (let i = 0; i < sortedArray.length - 1; i++) {
 for (let j = i + 1; j < sortedArray.length; j++) {
 if (sortedArray[i] === sortedArray[j]) {
 return true;
  }
 }
}
 return false;
}

//note to self: Sorts before checking

