EXERCISES:

1. What is a hash table?

hash data structure, also referred to as a hash table, is a type of data structure that stores each value by linking it to a key, forming key-value pairs, just like JavaScript objects. Each key must be unique in a hash table; therefore, a value can be retrieved by looking up its distinct key. Hash tables store these key-value pairs by placing them at a particular location in an array maintained internally in the hash table.


2. What is hashing?

 Hashing is the conversion from a key of any type to a numerical index. 



3. How does a hash table store data?

 A hash table stores data with an array in which each element is a key-value pair.


4. How are hash tables and objects different?

Hash tables are different from objects in that they tend to focus on a list of relevant key-data pairs which are elements in an array. hash tables store key-value pairs in numerical indices generated by running the key through a hashing function.
Hash tables are in a way more "generic" and don't describe in detail an individual thing like objects do. Objects are basically more static and list key-values more specifically.  


5. Determine whether you would use a hash table or an object to store each of the following pieces of data:
a. A list of pets and their unique names.
b. The name, age, and the birthday of your best friend.
c. The name and location of every company in a given city.
d. All of the books checked out from a library by a particular individual.
e. The primary and secondary phone numbers for a contact.

ANSWER: HASH TABLE  b.OBJECT c.HASH TABLE d.HASH TABLE e.OBJECT


PROGRAMMING QUESTIONS:

1. Create a hash table that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers.

let CustomerHash = class {
  constructor() {
    this.customerList = [];
    this.numCustomers = 30;
  }
  logCustomer(phone, name, address) {
    let phoneKey = phone.toString();
    let phoneIndex = this.hash(phone);
    if (
      this.customerList[phoneIndex] &&
      this.customerList[phoneIndex].key !==phone
     ) {
      let followingLink = 
       this.customerList[phoneIndex];
      let link = this.customerList[phoneIndex];
        while (link) {
        followingLink = link;
        link = link.next;
      }
      if (link == undefined) {
        link = {
          key: phone,
          value: '${name}, ${address}',
          next: null
        };
        followingLink.next = link;
      }
    } else if (phoneIndex <= this.numCustomers) {
      this.customerList[phoneIndex] = {
        key: phone,
        value: `${name}, ${address}`,
      };
    }
  }

  hash(phone) {
    let hashArray = [];
    let newPhone = phone.toString();
    for (let i = 0; i < newPhone.length -1; i++) {
      hashArray.push(newPhone.charCodeAt(i));
    }
    let end = Number(hashArray.join(""));
    return end % this.numCustomers;
  }

  findCustomer(phone) {
    let phoneIndex = this.hash(phone);
    if (this.customerList[phoneIndex].key == phone) {
      return this.customerList[phoneIndex].value;
    } else if (this.customerList[phoneIndex].next) {
      let nextLink = 
      this.customerList[phoneIndex].next;
        while (nextLink) {
         if (nextLink.key == phone) {
          return nextLink.value;
        } else {
          nextLink = nextLink.next;
        }
      }
    } else {
      return "Phone number doesn't exist.";
    }
  }
};

let phoneHash= new CustomerHash();

phoneHash.logCustomer(
  7604531476, 
  "Torri",
  "23 Coyote St, Reno"
);
phoneHash.logCustomer(
  7609783459, 
  "Wylie ",
  "46 Elm Ave, Reno"
);

phoneHash.logCustomer(
  7608281326, 
  "Finley",  
  "82 Main Blvd, Reno"
)
console.log(phoneHash);

console.log(phoneHash.findCustomer(7604531476));



2. Create a hash table that allows a store owner to track their store's inventory and quantity.


let InventoryHash = class {
  constructor() {
    this.inventory = [];
    this.buckets = 100;
  }
  logItem(item, quantity) {
    let itemKey = item.toString();
    let itemIndex = this.hash(itemKey);
    if (this.inventory[itemIndex]) {
      let trailingLink = this.inventory[itemIndex];
      let link = this.inventory[itemIndex];
      while (link) {
        trailingLink = link;
        link = link.next;
      }
      if (link == undefined) {
        link = {
          key: item,
          value: quantity,
          next: null
        };
        trailingLink.next = link;
      }
    } else if (itemIndex <= this.buckets) {
      this.inventory[itemIndex] = {
        key: item,
        value: quantity
      };
    }
  }

  hash(item) {
    let hashArray = [];
    for (let i = 0; i < item.length - 1; i++) {
      hashArray.push(item.charCodeAt(i));
    }
    let end = Number(hashArray.join(""));
    return end % this.buckets;
  }

  findQuantity(item) {
    let itemIndex = this.hash(item);
    if (this.inventory[itemIndex] && this.inventory[itemIndex].key == item) {
      return this.inventory[itemIndex].value;
    } else if (this.inventory[itemIndex].next) {
      let nextLink = this.inventory[itemIndex].next;
      while (nextLink) {
        if (nextLink.key == item) {
          return nextLink.value;
        } else {
          nextLink = nextLink.next;
        }
      }
    } else {
      return "Item not in Inventory.";
    }
  }
};


let itemHash = new InventoryHash();

itemHash.logItem("Short Flower Dress", 20);
itemHash.logItem("Sunset Hoodie", 12);
itemHash.logItem("Yellow Sandals", 10);
console.log(itemHash);
let find = itemHash.findQuantity("Sunset Hoodie");
console.log(find);




3. Create a hash table that allows digital copies of newspapers to be entered and searched by publisher and publication date.



let Hash = class {
  constructor() {
    this.paperArchive = [];
    this.buckets = 50;
  }

  logPaper(publishDate, publisher, content) {
    let paperKey1 = publishDate.toString();
    let paperKey2 = publisher.toString();
    let paperIndex = this.hash(paperKey1, paperKey2);
    console.log(paperIndex)
    if (
      this.paperArchive[paperIndex] &&
        !(this.paperArchive[paperIndex].key[0] == publishDate &&
      this.paperArchive[paperIndex].key[1] == publisher)
    ) {
      let trailingLink = this.paperArchive[paperIndex];
      let link = this.paperArchive[paperIndex];
      while (link) {
        trailingLink = link;
        link = link.next;
      }
      if (link == undefined) {
        link = {
          key: [publishDate, publisher],
          value: content,
          next: null
        };
        trailingLink.next = link;
      }
    } else if (paperIndex <= this.buckets) {
      this.paperArchive[paperIndex] = {
        key: [publishDate, publisher],
        value: content
      };
    }
  }

  hash(publishDate, publisher) {
    let hashArray1 = [];
    let hashArray2 = [];
    for (let i = 0; i < publishDate.length - 1; i++) {
      hashArray1.push(publishDate.charCodeAt(i));
    }
    let end1 = Number(hashArray1.join(""));
    for (let i = 0; i < publisher.length - 1; i++) {
      hashArray2.push(publisher.charCodeAt(i));
    }
    let end2 = Number(hashArray2.join(""));
    return (end1 + end2) % this.buckets;
  }

  findPaper(publishDate, publisher) {
    let paperIndex = this.hash(publishDate, publisher);
    if (
      this.paperArchive[paperIndex] &&
      (this.paperArchive[paperIndex].key[0] == publishDate &&
        this.paperArchive[paperIndex].key[1] == publisher)
    ) {
      return this.paperArchive[paperIndex].value;
    } else if (this.paperArchive[paperIndex].next) {
      let nextLink = this.paperArchive[paperIndex].next;
      while (nextLink) {
        if (nextLink.key[0] == publishDate && nextLink.key[1] == publisher) {
          return nextLink.value;
        } else {
          nextLink = nextLink.next;
        }
      }
    } else {
      return "Paper doesn't exist.";
    }
  }
};

let paperHash = new Hash();

paperHash.logPaper(
  2002,
  "San Diego Tribune",
  "The Queen Visits San Diego!"
);
paperHash.logPaper(
  2008,
  "San Diego Tribune",
  "Bulldog Wins Dog Surf Contest!"
);
paperHash.logPaper(
  2015,
  "San Diego Tribune",
  "Cutest Baby Ever is Born!"
);
console.log(paperHash);
let find = paperHash.findPaper(2008, "San Diego Tribune");
console.log(find);
