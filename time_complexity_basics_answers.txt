EXERCISES

1. What is time complexity and what is its relation to algorithms?
A function that estimates the time it takes for a program to execute. It's also known as runtime.  To determine the time complexity of an algorithm, add up how many instructions the algorithm will execute as a function of the size of its input, then simplify the expression to the largest term and drop any constants. 


2. What is runtime?  
Physical time duration of an algorithm; it is also synonymous with time complexity.



3. How is the runtime of an algorithm calculated?
To determine the time complexity of an algorithm, add up how many instructions the algorithm will execute as a function of the size of its input, then simplify the expression to the largest term and drop any constants. ie; `1 + n + n` will be `1 + 2n` and then will become `n`, which will finally evaluate to `(O(n))`


4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

O(1) = constant growth rate
O(log n) = logarithmic growth rate 
O(n) = linear growth rate
O(n log n) = log-linear growth rate
O(n^2) = quadratic growth rate
O(2^n) = exponential growth rate

O(n!) - factorial time


5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Moore's Law (logarithmic growth rate) = Moore's law is demonstrated by a $1500 computer today being worth half that amount next year and being almost obsolete in two years.


6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

answer: (0)n


7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

answer: 0(n^2)



8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

answer: 0(2^n)



9. Out of the code snippets you just saw, which is the most time efficient?

0(n), linear search.





