EXERCISES:

1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

//a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

let parkRiders = ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

//b) Insert a new person, "Mary" at the end of the line. In other words, you should insert 
//Mary after Mike.

parkRiders.push("Mary");
console.log(parkRiders);


//c) Find a person in line named "Josh." This function should return the position of 2 in 
//the array, (recall that arrays are 0-based).



let findRider = parkRiders;
  parkRiders.indexOf("Josh");



//d) Find a person in line named "Emily." What should your function return if it does not
//find the item in the array?


let parkRiders = ["Vivian", "Ava", "Josh", "Patrick", "Mike","Mary"];
   console.log(parkRiders.includes("Emily"));


It will return "false"


//e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How
//would you code this so Melissa appears before Ava?

let parkRiders = ["Vivian", "Ava", "Josh", "Patrick", "Mike","Mary"];
  parkRiders.splice(1, 0, "Melissa");

console.log(parkRiders);

//f) If Patrick wants to leave the line, how would you delete him from the array?

let parkRiders = ["Vivian", "Ava", "Josh", "Patrick", "Mike","Mary"];
  parkRiders.splice(3, 1);

console.log(parkRiders);


2. Provide another real-world example that you can model using a data structure.

let groceryItems = ["lettuce", "onions", "avocados", "cucumber" ]
let findGrossest = groceryItems.find(item => item === "onions");

console.log(findGrossest);


3. How would your data structure allow developers to access and manipulate the data?

The data structure above is an array of grocery items.  It stores a list of groceries (data) that can be changed, added to, deleted from, etc, through functions(methods and expressions) and variables. Javascript allows the data structure of groceryItems to be manipulated in various ways as needed. 







