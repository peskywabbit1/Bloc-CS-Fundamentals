EXERCISES:



1. What is the main difference between a stack and a queue?

Stack data structure implements a LIFO priority. This means Last In First Out.  It offers two functions `push` and `pop`. Software compilers use primitive stacks to store vital information in a computer's memory.  It adds elements to the top of a stack and then removes from the top of the stack in that order.  

We use queue data structures to help us arrange events in a way our applications tolerate. It subscribes to the FIFO First On First Off protocol.   All jobs are added to the back of the queue. The first job in line gets seen to and completed first. 

2. What are the similarities between stacks and queues?

They are different types of data structures, but they both enable engineers to rank tasks, create and order of operations and support system functions.  


3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

With UNDO I would implement the LIFO data structure because the user generally wants to undo the last entry they did.

With REDO I would implement the LIFO, as the user would want to reverse the undo which is the last command on the undo stack. 

PROGRAMMING:

//Before you begin coding, write out a plan as to how you will solve the question.

1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".  // LIFO

PLAN: 


 FUNCTION reverse ("Bloc!")
  INIT a new stack.
  FOR each character in "Bloc!"
    CALL stack.push with character 
  END FOR
  INIT reversed to empty string
  WHILE stack is not empty
    CALL stack.pop. RETURNING character
    APPEND character to reversed
  END WHILE
  RETURN reversed
 END FUNCTION






function reverseString(str) {
 let blocArray = str.split("");  // start with old array
 let resultArray = [];		// create new empty array
 x = blocArray.length;		// decrement letters from the old array
 for (i = x; i > -1; i--) {
  resultArray.push(blocArray[i]);	// push letter to last position on the array
}
 str = resultArray.join("");
 return str;
}
reverseString("Bloc!");


*Can the below functions be used as a stack function?*


function reverseString(str) {
 let splitString = str.split("");
 let reverseArray = splitString.reverse();
 let joinArray = reverseArray.join("");
 return joinArray; 
}

reverseString("Bloc!");

// or chain the three methods together

function reverseString(str) {
 return str.split("").reverse().join("");
}
reverseString("Bloc!");



2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

CLASS Stack
 FUNCTION pop(queue)
   ENTER queue array
   FOR to loop elements in the array 
   deqeue
   THEN enqeue
   PUSH elements to the array
   CALL .pop to delete the last element
   RETURN new array
 END FUNCTION
END CLASS




3. To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.

 

let groceryList = ["cauliflower", "celery", "milk", "cereal"];

class Queue{
  constructor(groceryList){
    this.groceryList = groceryList;
  }
  enqueue(person){
   groceryList.push(item);
    return groceryList;
  }
  dequeue(groceryList){
    let temp = groceryList[0];
    if(typeof temp == "string"){
     groceryList.shift();
      return temp;
    }
  }
}

class Procedure extends Queue{
  constructor(groceryList){
    super(groceryLine);
  }
}

let start = new Procedure(groceryList);

//calls the dequeue method: console.log(start.dequeue(groceryList));

//calls the queue method: console.log(start.enqueue("butter"));
